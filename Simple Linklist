#include<stdio.h>
#include<malloc.h>
typedef struct node{
    int data;
    struct node* next;
}node

node *start=NULL;
node *end=NULL;

int insert_beg(int x){
    node *ptr;
    ptr=(node *)malloc(sizeof(node));
    if(ptr==NULL){
        printf("memory is full");
        return 0;
    }
    ptr->data=x;
    ptr->next=NULL;
    if(start==NULL){
        start=ptr;
    }
    else{
        ptr->next=start;
        start=ptr;
    }
    return 1;
}

int insert_end(int x){
    node *ptr,*p;
    ptr=(node *)malloc(sizeof(node));
    if(ptr==NULL){
        printf("memory is full");
        return 0;
    }
    ptr ->data=x;
    ptr->next=NULL;
    if(start==NULL){
        start=ptr;
    }
    else{
        p=start;
        while(p->next!=NULL){
            p=p->next;
        }
        p->next=ptr;
    }
    return 1;
}

int insert_after(int x,int y){
    node*ptr,*p;
    ptr=(node *)malloc(sizeof(node));
    if(ptr==NULL){
        printf("memory is full");
        return 0;
    }
    ptr->data=x;
    ptr->next=NULL;
    if(start==NULL){
        printf("linklist is emty key is  not found");
        return 0;
    }
    p=start;
    while(p!=NULL && p->data!=y){
        p=p->next;
    }
    if(p==NULL){
        printf("key not found");
        return 0;
    }
    else{
        ptr->next=p->next;
        p->next=ptr;
    }
    return 1;
}

int insert_before(int x,int key){
    node *ptr,*p,*prev;
    ptr=(node *)malloc(sizeof(node));
    if(ptr==NULL){
        printf("memory is full");
        return 0;
    }
    ptr->data=x;
    ptr->next=NULL;
    if(start==NULL){
        printf("ll is empty ");
        return 0;
    }
    p=start;
    prev=NULL;
    while(p!=NULL && p->data!=key){
        prev=p;
        p=p->next;
    }
    if(p==NULL){
        printf("key not found");
        return 0;
    }
    else if(p==start){
        ptr->next=start;
        start=ptr;
    }
    else{
        ptr->next=p;
        prev->next=ptr;
    }
    return 1;
}

int insert_pos(int x,int pos){
    int i;
    node *ptr,*p;
    ptr=(node*)malloc(sizeof(node));
    if(ptr==NULL){
        printf("memory is full");
        return 0;
    }
    ptr->data=x;
    ptr->next=NULL;
    if(pos<0){
        printf("invalid pos");
        return 0;
    }
    if(pos<=1){
        ptr->next=start;
        start=ptr;
        return 1;
    }
    p=start;
    fr(i=0;i<=(pos-2);i++){
        if(p==NULL){
            break;
        }
        else{
            p=p->next;
        }
    }
    if(p==NULL){
        printf("invalid pos");
        return 0;
    }
    else{
        ptr->next=p->next;
        p->next=ptr;
        return 1;
    }
}

int del_beg(){
    int x;
    node *p;
    if(start==NULL){
        printf("linklist is empty");
        return -65536;
    }
    p=start;
    start=p->next;
    x=p->data;
    p->next=NULL;
    free(p);
    return x;
}

int del_end(){
    int x;
    node *prev,*p;
    if(start==NULL){
        printf("linklist is empty");
        return -65536;
    }
    p=start;
    prev=NULL;
    while(p->next!=NULL){
        prev=p;p=p->next;
    }
    if(p==start){
        start=NULL;
    }
    else{
        prev->next=NULL;
    }
    x=p->data;
    free(p);
    return x;
}

int del_after(int key){
    int x;
    node *p,*q;
    if(start==NULL){
        printf("linklist is empty");
        return -65536;
    }
    p=start;
    while(p->next!=NULL && p->data!=key){
        p=p->next;
    }
    if(p==NULL){
        printf("key not found");
        return -65536;
    }
    if(p->next==NULL){
        printf("no element after the key");
        return -65536;
    }
    q=p->next;
    p->next=q->next;
    x=q->data;
    free(q);
    return x;
}

int del_node(int key){
    node *p,*prev;
    int x;
    if(start==NULL){
        printf("linklist is empty");
        return -65536;
    }
    p=start;
    p->next=NULL;
    while(p!=NULL && p->data!=key){
        p=p->next;
    }
    if(p==NULL){
        printf("key is not found");
        return -65536;
    }
    if(p==start){
        start=p->next;
    }
    else{
        prev->next=p->next;
    }
    p->next=NULL;    
    x=p->data;
    free(p);
    return x;
}

int search(int key){
    int pos=0;
    node *p;
    if(start==NULL){
        printf("linklist is empty");
        return -65536;
    }
    p=start;
    while(p!=NULL && p->data!=key){
        p=p->next;
        pos++;
    }
    if(p==NULL){
        return -1;
    }
    else{
        return pos;
    }
}

int count(){
    node *p;
    int c=0;
    p=start;
    while(p!=NULL){
        p=p->next;
        c++;
    }
    return c;
}
